<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <title>Weather App</title>
  <style>
    body {
      background: #000;
    }

    #map {
      width: 100%;
      height: 300px;
    }

    .gradient-custom {
      /* fallback for old browsers */
      background: #ffffff;

      /* Chrome 10-25, Safari 5.1-6 */
      background: -webkit-linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 236, 210, 1));

      /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
      background: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 236, 210, 1))
    }

    .chart {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #location-form {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 1.2rem;
    }

    #submit {
      margin-top: inherit;
    }
  </style>
</head>

<body>
  <form class="row g-3" method="POST" id="location-form">
    <div class="col-11">
      <label for="inputlocation" class="visually-hidden">location</label>
      <input class="form-control" placeholder="Type Your Location" type="text" name="cityName" id="cityName">
    </div>
    <div class="col-auto" id="submit">
      <input type="submit" class="btn btn-primary mb-3" value="Submit" formaction="/get-weather">
    </div>
  </form>
  <!-- <form method="POST" id="location-form">
        <input type="text" name="cityName" id="cityName">
        <input type="submit" value="Submit" formaction="/get-weather">
    </form> -->
  <div id="map"></div>
  <div id="weather-info"></div>
  <div id="soil-moisture"></div>
  <div style="height: 500px;" class="chart">
    <canvas id="rainfallChart"></canvas>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    let lat, lon;
    // initialize map
    const map = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors',
    }).addTo(map);
    let marker = L.marker([20.5937, 78.9629]).addTo(map);
    // Add click event listener to map

    //condition code with respective bg color
    const weatherBackgrounds = {
      "01d": "linear-gradient(to right, rgb(255,254,246), #f9d71c)", // Clear sky (day)
      "01n": "linear-gradient(to right, rgb(255,254,246), #0d47a1)", // Clear sky (night) - Dark Blue

      "02d": "linear-gradient(to right, rgb(255,254,246), #e2ebf0)", // Few clouds (day)
      "02n": "linear-gradient(to right, rgb(255,254,246), #1565c0)", // Few clouds (night) - Dark Blue

      "03d": "linear-gradient(to right, rgb(255,254,246), #78909c)", // Scattered clouds (day)
      "03n": "linear-gradient(to right, rgb(255,254,246), #1e3a5f)", // Scattered clouds (night) - Dark Blue

      "04d": "linear-gradient(to right, rgb(255,254,246), #455a64)", // Broken clouds (day)
      "04n": "linear-gradient(to right, rgb(255,254,246), #102a43)", // Broken clouds (night) - Dark Blue

      "09d": "linear-gradient(to right, rgb(255,254,246), #039be5)", // Shower rain (day)
      "09n": "linear-gradient(to right, rgb(255,254,246), #0b3d91)", // Shower rain (night) - Dark Blue

      "10d": "linear-gradient(to right, rgb(255,254,246), #4fc3f7)", // Rain (day)
      "10n": "linear-gradient(to right, rgb(255,254,246), #0a2472)", // Rain (night) - Dark Blue

      "11d": "linear-gradient(to right, rgb(255,254,246), #ff8c00)", // Thunderstorm (day)
      "11n": "linear-gradient(to right, rgb(255,254,246), #1b1f3b)", // Thunderstorm (night) - Dark Blue

      "13d": "linear-gradient(to right, rgb(255,254,246), #b2ebf2)", // Snow (day)
      "13n": "linear-gradient(to right, rgb(255,254,246), #0d2b45)", // Snow (night) - Dark Blue

      "50d": "linear-gradient(to right, rgb(255,254,246), #b0bec5)", // Mist (day)
      "50n": "linear-gradient(to right, rgb(255,254,246), #1c3d5a)"  // Mist (night) - Dark Blue
    };




    let rainfallChart
    document.getElementById('location-form').addEventListener('submit', async function (e) {
      e.preventDefault(); // Prevent form submission

      const cityName = encodeURIComponent(document.getElementById('cityName').value.trim().toLowerCase());


      // Geocoding request to get the lat and lon of the typed city
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${cityName}&format=json&addressdetails=1`);
      const data = await response.json();


      // console.log(data[0]);

      if (data.length > 0) {
        lat = data[0].lat;
        lon = data[0].lon;
        console.log(lat, lon);


        // Update the map view and marker position
        map.setView([lat, lon], 13); // Zoom to the location
        marker.setLatLng([lat, lon]); // Move the marker



      } else {
        alert("Location not found!");
      }
      // passing data to backend via get-weather-submit route(when user typed)

      const ctx = document.getElementById('rainfallChart').getContext('2d');
      try {
        const response = await fetch('/get-weather-submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ lat, lon }),
        });

        const data = await response.json();
        console.log(data);



        //change background color according to weather
        function changeBg(code) {
          const gradientElement = document.querySelector(".gradient-custom");

          if (!gradientElement) {
            console.error("Element with class 'gradient-custom' not found.");
            return;
          }

          const background = weatherBackgrounds[code] || "linear-gradient(to bottom, #9e9e9e, #757575)"; // Fallback color
          gradientElement.style.background = background;
        }






        //to ensure that the first occurence of each day is recored.
        const humidityData = [];
        const labels = [];
        const recordedDates = new Set();

        for (let i = 0; i < data.forecast.length; i++) {
          let date = new Date(data.forecast[i].dt_txt);
          let dayLabel = date.toLocaleDateString("en-US", { weekday: "short" });

          // Ensure only the first occurrence of each day is recorded
          if (!recordedDates.has(dayLabel)) {
            humidityData.push(data.forecast[i].main.humidity);
            labels.push(dayLabel);
            recordedDates.add(dayLabel);
          }
        }

        console.log(humidityData);
        console.log(labels);

        console.log(humidityData);

        if (rainfallChart) {
          rainfallChart.destroy();
        }



        // Create the rainfall chart
        rainfallChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels, // Dynamic month labels
            datasets: [{
              label: 'Humidity (in %)',
              data: humidityData, // Dynamic rainfall data
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1,
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'Humidity (in %)',
                },
              },
              x: {
                title: {
                  display: true,
                  text: 'Days',
                },
              }
            },
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Weekly Rainfall Distribution',
              }
            }
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }








        if (data.location && data.forecast) {
          document.getElementById('weather-info').innerHTML = `
                    <div id="weatherCarousel" class="carousel slide m-5" data-bs-ride="carousel" data-bs-carousel-init>
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="0" class="active bg-secondary"
      aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="1" class="bg-secondary"
      aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="2" class="bg-secondary"
      aria-label="Slide 3"></button>
  </div>
  <div class="carousel-inner rounded-5">
    <div class="carousel-item active">
      <div class="d-flex justify-content-between align-items-center px-5 gradient-custom" style="height: 230px">
        <div>
          <h2 class="text-dark display-2"><strong>${data.forecast[0].main.temp}Â°C</strong></h2>
          <p class="text-dark mb-0">${data.location}</p>
        </div>
        <div>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png"
            width="150px">
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <div class="d-flex justify-content-around text-center align-items-center px-5 bg-body-tertiary"
        style="height: 230px">
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[0].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[0].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[1].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[1].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[1].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[2].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[2].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[2].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[3].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[3].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[3].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <div class="d-flex justify-content-around text-center align-items-center px-5 bg-body-tertiary"
        style="height: 230px">
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[0].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[0].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[4].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[4].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[4].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[8].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[8].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[8].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[12].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[12].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[12].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[16].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[16].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[16].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
      </div>
    </div>
  </div>
</div>

                `;

          changeBg(data.forecast[0].weather[0].icon)

        } else {
          alert("Weather data not available for the selected location.");
        }
      } catch (error) {
        console.error("Error fetching weather data:", error);
        alert("Failed to fetch weather data. Please try again.");
      }
    });


    map.on('click', async function (e) {
      const lat = e.latlng.lat;
      const lon = e.latlng.lng;

      if (marker) map.removeLayer(marker);
      marker = L.marker([lat, lon]).addTo(map);


      const ctx = document.getElementById('rainfallChart').getContext('2d');
      try {
        // Fetch weather data from the backend
        const response = await fetch('/get-weather', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ lat, lon }),
        });

        //change background color according to weather
        function changeBg(code) {
          const gradientElement = document.querySelector(".gradient-custom");

          if (!gradientElement) {
            console.error("Element with class 'gradient-custom' not found.");
            return;
          }

          const background = weatherBackgrounds[code] || "linear-gradient(to bottom, #9e9e9e, #757575)"; // Fallback color
          gradientElement.style.background = background;
        }

        const data = await response.json();
        console.log(data.location);
        console.log(data.forecast[0].main.temp);


        // console.log(data.forecast.main.temp);





        // arrays of rainfall precipitation and days
        // const humidityData = data.forecast.map(day => day.main.humidity);

        //to ensure that the first occurence of each day is recored.
        const humidityData = [];
        const labels = [];
        const recordedDates = new Set();

        for (let i = 0; i < data.forecast.length; i++) {
          let date = new Date(data.forecast[i].dt_txt);
          let dayLabel = date.toLocaleDateString("en-US", { weekday: "short" });

          // Ensure only the first occurrence of each day is recorded
          if (!recordedDates.has(dayLabel)) {
            humidityData.push(data.forecast[i].main.humidity);
            labels.push(dayLabel);
            recordedDates.add(dayLabel);
          }
        }

        console.log(humidityData);
        console.log(labels);

        console.log(humidityData);

        // destroy the previous chart
        if (rainfallChart) {
          rainfallChart.destroy();
        }

        // Create the rainfall chart
        rainfallChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels, // Dynamic month labels
            datasets: [{
              label: 'Humidity (in %)',
              data: humidityData, // Dynamic rainfall data
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1,
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'Humidity (in %)',
                },
              },
              x: {
                title: {
                  display: true,
                  text: 'Days',
                },
              }
            },
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Weekly Rainfall Distribution',
              }
            }
          }
        });
        const loc = data.location;
        if (loc) {
          document.getElementById('weather-info').innerHTML = `
                    <div id="weatherCarousel" class="carousel slide m-5" data-bs-ride="carousel" data-bs-carousel-init>
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="0" class="active bg-secondary"
      aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="1" class="bg-secondary"
      aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#weatherCarousel" data-bs-slide-to="2" class="bg-secondary"
      aria-label="Slide 3"></button>
  </div>
  <div class="carousel-inner rounded-5">
    <div class="carousel-item active">
      <div class="d-flex justify-content-between align-items-center px-5 gradient-custom" style="height: 230px">
        <div>
          <h2 class="text-dark display-2"><strong>${data.forecast[0].main.temp}Â°C</strong></h2>
          <p class="text-dark mb-0">${data.location}</p>
        </div>
        <div>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png"
            width="150px">
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <div class="d-flex justify-content-around text-center align-items-center px-5 bg-body-tertiary"
        style="height: 230px">
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[0].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[0].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[1].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[1].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[1].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[2].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[2].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[2].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[3].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[3].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${data.forecast[3].dt_txt.split(" ")[1]}</strong></p>
          <p class="mb-0 text-muted" style="font-size: .65rem;">PM</p>
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <div class="d-flex justify-content-around text-center align-items-center px-5 bg-body-tertiary"
        style="height: 230px">
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[0].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[0].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[0].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[4].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[4].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[4].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[8].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[8].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[8].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[12].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[12].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[12].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
        <div class="flex-column">
          <p class="small"><strong>${data.forecast[16].main.temp}Â°C</strong></p>
          <img src="https://openweathermap.org/img/wn/${data.forecast[16].weather[0].icon}@2x.png">
          <p class="mb-0"><strong>${new Date(data.forecast[16].dt_txt).toLocaleString('en', { weekday: 'short' })}</strong></p>
        </div>
      </div>
    </div>
  </div>
</div>

                `;
          document.getElementById("cityName").value = data.location

          changeBg(data.forecast[0].weather[0].icon)


        } else {
          alert("Weather data not available for the selected location.");
        }


        // Display the weather information
        // alert(`Location: ${data.location}\nForecast: ${data.forecast}\nTemperature: ${data.temperature}\nHumidity: ${data.humidity}\nWind: ${data.wind}`);
      } catch (error) {
        console.error("Error fetching weather data:", error);
        alert("Failed to fetch weather data. Please try again.");
      }
    });


  </script>
</body>

</html>